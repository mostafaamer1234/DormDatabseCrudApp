/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program;

import java.time.LocalDate;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.DatePicker;
import java.time.format.DateTimeFormatter;
import java.time.LocalTime;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import entity.*;
import java.util.Optional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import com.github.lgooddatepicker.components.*;
import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.TimePickerSettings;

/**
 *
 * @author Gokhan
 */
public class Main_test extends javax.swing.JFrame {
    private static DAO StudentDAO, RoomDAO, StaffDAO,AssignmentDAO ;
    
private static final LocalDate MIN_DATE = LocalDate.of(2000, 1, 1);
    private static final LocalDate MAX_DATE = LocalDate.of(2030, 12, 31);

    
    public Main_test() {
        initComponents();
        setDateConstraints();
        refreshStudentTable();
        refreshRoomTable();
        refreshStaffTable();
        refreshAssignmentTable();
        dateTimePickerDateOfBirth = new DateTimePicker();
        dateTimePickerHireDate = new DateTimePicker();
        dateTimePickerDateAssigned = new DateTimePicker();
        
    }
private void setDateConstraints() {
    setDateTimePickerConstraints(dateTimePickerDateOfBirth);
    setDateTimePickerConstraints(dateTimePickerHireDate);
    setDateTimePickerConstraints(dateTimePickerDateAssigned);
}

private void setDateTimePickerConstraints(DateTimePicker dateTimePicker) {
    

    // Add a listener to validate the selected date
    dateTimePicker.datePicker.addDateChangeListener(event -> {
        LocalDate newDate = event.getNewDate();
        if (newDate != null && (newDate.isBefore(LocalDate.of(2000, 1, 1)) || newDate.isAfter(LocalDate.of(2030, 12, 31)))) {
            JOptionPane.showMessageDialog(null, "Invalid Date. Please enter a date between 2000 and 2030.");
            dateTimePicker.datePicker.clear();
        }
    });
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JTabbedPane jTabbedPaneDorm = new javax.swing.JTabbedPane();
        jPanelStudent = new javax.swing.JPanel();
        jScrollPaneCheckinLocation = new javax.swing.JScrollPane();
        jTableStudent = new javax.swing.JTable();
        jTextFieldStudent_ID = new javax.swing.JTextField();
        jTextFieldStudent_FirstName = new javax.swing.JTextField();
        javax.swing.JLabel jLabelStudent_FirstName = new javax.swing.JLabel();
        jLabelStudent_ID = new javax.swing.JLabel();
        jButtonInsertStudent = new javax.swing.JButton();
        javax.swing.JButton jButtonUpdateStudent = new javax.swing.JButton();
        jButtonDeleteStudent = new javax.swing.JButton();
        jLabelStudentFirstName = new javax.swing.JLabel();
        jTextFieldStudentLastName = new javax.swing.JTextField();
        jLabelStudentFirstName1 = new javax.swing.JLabel();
        jLabelSchoolEmail = new javax.swing.JLabel();
        jTextFieldSchoolEmail = new javax.swing.JTextField();
        jLabelPhoneNumber = new javax.swing.JLabel();
        jTextFieldPhoneNumber = new javax.swing.JTextField();
        dateTimePickerDateOfBirth = new com.github.lgooddatepicker.components.DateTimePicker();
        jPanelRoom = new javax.swing.JPanel();
        jScrollPanePassenger = new javax.swing.JScrollPane();
        jTableRoom = new javax.swing.JTable();
        jTextFieldRoom_ID = new javax.swing.JTextField();
        jLabelRoom_ID = new javax.swing.JLabel();
        jLabelPassengerRoomNumber = new javax.swing.JLabel();
        jTextFieldRoomType = new javax.swing.JTextField();
        javax.swing.JLabel jLabelRoomType = new javax.swing.JLabel();
        jLabelRoomPrice = new javax.swing.JLabel();
        jButtonInsertRoom = new javax.swing.JButton();
        jButtonUpdateRoom = new javax.swing.JButton();
        javax.swing.JButton jButtonDeleteRoom = new javax.swing.JButton();
        jTextFieldRoomNumber = new javax.swing.JTextField();
        jTextFieldRoomPrice = new javax.swing.JTextField();
        jPanelStaffMain = new javax.swing.JPanel();
        jPanelStaff = new javax.swing.JPanel();
        jScrollPanePassenger1 = new javax.swing.JScrollPane();
        jTableStaff = new javax.swing.JTable();
        jTextFieldStaff_ID = new javax.swing.JTextField();
        jLabelStaff_ID = new javax.swing.JLabel();
        javax.swing.JLabel jLabelStaff_FirstName = new javax.swing.JLabel();
        jTextFieldStaff_LastName = new javax.swing.JTextField();
        javax.swing.JLabel jLabelPassengerLastName1 = new javax.swing.JLabel();
        jLabelHireDate = new javax.swing.JLabel();
        jButtonInsertStaff = new javax.swing.JButton();
        jButtonUpdateStaff = new javax.swing.JButton();
        javax.swing.JButton jButtonDeleteStaff = new javax.swing.JButton();
        jLabelStaffPosition = new javax.swing.JLabel();
        jTextFieldStaffPosition = new javax.swing.JTextField();
        dateTimePickerHireDate = new com.github.lgooddatepicker.components.DateTimePicker();
        jTextFieldFirstName1 = new javax.swing.JTextField();
        jLabelStaffDepartment = new javax.swing.JLabel();
        jTextFieldStaffDepartment = new javax.swing.JTextField();
        jLabelStaffPhoneNumber = new javax.swing.JLabel();
        jTextFieldStaffPhoneNumber = new javax.swing.JTextField();
        javax.swing.JLabel jLabelStaffSchoolEmail = new javax.swing.JLabel();
        jTextFieldStaffSchoolEmail = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanelAssignment = new javax.swing.JPanel();
        jScrollPanePassenger2 = new javax.swing.JScrollPane();
        jTableAssignment = new javax.swing.JTable();
        jTextFieldAssignment_ID1 = new javax.swing.JTextField();
        jLabelAssignment_ID = new javax.swing.JLabel();
        jLabelDateAssigned = new javax.swing.JLabel();
        javax.swing.JButton jButtonInsertAssignment = new javax.swing.JButton();
        jButtonUpdateAssignment = new javax.swing.JButton();
        javax.swing.JButton jButtonDeleteAssignment = new javax.swing.JButton();
        dateTimePickerDateAssigned = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldStudentIDf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldRoom_IDFo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldStaff_IDFo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dorm CRUD");
        setResizable(false);

        jTabbedPaneDorm.setName("Customer"); // NOI18N

        jTableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", " Last Name", "Date of Birth", "School Email", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableStudent.setCellSelectionEnabled(true);
        jTableStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableStudentMouseClicked(evt);
            }
        });
        jScrollPaneCheckinLocation.setViewportView(jTableStudent);
        jTableStudent.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabelStudent_FirstName.setText("Student First Name");
        jLabelStudent_FirstName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStudent_ID.setText("Student_ID");
        jLabelStudent_ID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jButtonInsertStudent.setText("Insert");
        jButtonInsertStudent.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInsertStudent.setIconTextGap(0);
        jButtonInsertStudent.setInheritsPopupMenu(true);
        jButtonInsertStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertStudentActionPerformed(evt);
            }
        });

        jButtonUpdateStudent.setText("Update");
        jButtonUpdateStudent.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateStudentActionPerformed(evt);
            }
        });

        jButtonDeleteStudent.setText("Delete");
        jButtonDeleteStudent.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteStudentActionPerformed(evt);
            }
        });

        jLabelStudentFirstName.setText("Student Last Name");
        jLabelStudentFirstName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldStudentLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStudentLastNameActionPerformed(evt);
            }
        });

        jLabelStudentFirstName1.setText("DateOfBirth");
        jLabelStudentFirstName1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelSchoolEmail.setText("School Email");
        jLabelSchoolEmail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldSchoolEmail.setToolTipText("");

        jLabelPhoneNumber.setText("Phone Number");
        jLabelPhoneNumber.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldPhoneNumber.setToolTipText("");

        javax.swing.GroupLayout jPanelStudentLayout = new javax.swing.GroupLayout(jPanelStudent);
        jPanelStudent.setLayout(jPanelStudentLayout);
        jPanelStudentLayout.setHorizontalGroup(
            jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelStudentLayout.createSequentialGroup()
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelStudent_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStudent_FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldStudent_FirstName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                            .addComponent(jTextFieldStudent_ID, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudentLayout.createSequentialGroup()
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelStudentLayout.createSequentialGroup()
                                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSchoolEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStudentFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelStudentFirstName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelStudentLayout.createSequentialGroup()
                                .addComponent(jButtonInsertStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelStudentLayout.createSequentialGroup()
                                .addComponent(jButtonUpdateStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonDeleteStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldStudentLastName)
                            .addComponent(jTextFieldSchoolEmail)
                            .addComponent(jTextFieldPhoneNumber)
                            .addComponent(dateTimePickerDateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneCheckinLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelStudentLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldStudentLastName, jTextFieldStudent_FirstName});

        jPanelStudentLayout.setVerticalGroup(
            jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStudentLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelStudentLayout.createSequentialGroup()
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldStudent_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelStudentLayout.createSequentialGroup()
                                .addComponent(jLabelStudent_ID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelStudent_FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldStudent_FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelStudentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldStudentLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelStudentFirstName1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateTimePickerDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSchoolEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldSchoolEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                            .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelStudentLayout.createSequentialGroup()
                        .addComponent(jScrollPaneCheckinLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(36, 36, 36)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInsertStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(172, 172, 172))
        );

        jPanelStudentLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabelStudentFirstName, jLabelStudentFirstName1, jLabelStudent_FirstName});

        jTabbedPaneDorm.addTab("Student", jPanelStudent);

        jTableRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room ID", "Room Number", "Room Type", "Room Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRoomMouseClicked(evt);
            }
        });
        jScrollPanePassenger.setViewportView(jTableRoom);
        if (jTableRoom.getColumnModel().getColumnCount() > 0) {
            jTableRoom.getColumnModel().getColumn(2).setHeaderValue("Room Type");
            jTableRoom.getColumnModel().getColumn(3).setResizable(false);
            jTableRoom.getColumnModel().getColumn(3).setHeaderValue("Room Price");
        }

        jLabelRoom_ID.setText("Room_ID");
        jLabelRoom_ID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelPassengerRoomNumber.setText("Room Number");
        jLabelPassengerRoomNumber.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPassengerRoomNumber.setToolTipText("");

        jLabelRoomType.setText("Room Type");
        jLabelRoomType.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelRoomType.setToolTipText("");

        jLabelRoomPrice.setText("Room Price");
        jLabelRoomPrice.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelRoomPrice.setToolTipText("");

        jButtonInsertRoom.setText("Insert");
        jButtonInsertRoom.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInsertRoom.setIconTextGap(0);
        jButtonInsertRoom.setInheritsPopupMenu(true);
        jButtonInsertRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertRoomActionPerformed(evt);
            }
        });

        jButtonUpdateRoom.setText("Update");
        jButtonUpdateRoom.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateRoomActionPerformed(evt);
            }
        });

        jButtonDeleteRoom.setText("Delete");
        jButtonDeleteRoom.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRoomActionPerformed(evt);
            }
        });

        jTextFieldRoomPrice.setToolTipText("");

        javax.swing.GroupLayout jPanelRoomLayout = new javax.swing.GroupLayout(jPanelRoom);
        jPanelRoom.setLayout(jPanelRoomLayout);
        jPanelRoomLayout.setHorizontalGroup(
            jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRoomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRoomLayout.createSequentialGroup()
                        .addComponent(jButtonInsertRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButtonUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelRoomLayout.createSequentialGroup()
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelRoomPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelRoomType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelPassengerRoomNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldRoomNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jTextFieldRoomPrice)))
                    .addGroup(jPanelRoomLayout.createSequentialGroup()
                        .addComponent(jLabelRoom_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldRoom_ID, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(jTextFieldRoomType))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPanePassenger, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(616, 616, 616))
        );

        jPanelRoomLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldRoomNumber, jTextFieldRoom_ID});

        jPanelRoomLayout.setVerticalGroup(
            jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRoomLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPanePassenger, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelRoomLayout.createSequentialGroup()
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldRoom_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRoom_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelPassengerRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelRoomLayout.createSequentialGroup()
                                .addComponent(jTextFieldRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRoomPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldRoomPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanelRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonInsertRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(216, Short.MAX_VALUE))
        );

        jPanelRoomLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextFieldRoomPrice, jTextFieldRoomType});

        jTabbedPaneDorm.addTab("Room", jPanelRoom);

        jTableStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " ID", "First Name", "Last Name", "Hire Date", "Position", "Department", "Phone Number", "School Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableStaffMouseClicked(evt);
            }
        });
        jScrollPanePassenger1.setViewportView(jTableStaff);
        if (jTableStaff.getColumnModel().getColumnCount() > 0) {
            jTableStaff.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabelStaff_ID.setText("Staff_ID");
        jLabelStaff_ID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStaff_FirstName.setText("First Name");
        jLabelStaff_FirstName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelStaff_FirstName.setToolTipText("");

        jLabelPassengerLastName1.setText("Last Name");
        jLabelPassengerLastName1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelPassengerLastName1.setToolTipText("");

        jLabelHireDate.setText("Hire Date");
        jLabelHireDate.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelHireDate.setToolTipText("");

        jButtonInsertStaff.setText("Insert");
        jButtonInsertStaff.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInsertStaff.setIconTextGap(0);
        jButtonInsertStaff.setInheritsPopupMenu(true);
        jButtonInsertStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertStaffActionPerformed(evt);
            }
        });

        jButtonUpdateStaff.setText("Update");
        jButtonUpdateStaff.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateStaffActionPerformed(evt);
            }
        });

        jButtonDeleteStaff.setText("Delete");
        jButtonDeleteStaff.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteStaffActionPerformed(evt);
            }
        });

        jLabelStaffPosition.setText("Position");
        jLabelStaffPosition.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelStaffPosition.setToolTipText("");

        jLabelStaffDepartment.setText("Department");
        jLabelStaffDepartment.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldStaffDepartment.setToolTipText("");

        jLabelStaffPhoneNumber.setText("Phone Number");
        jLabelStaffPhoneNumber.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelStaffSchoolEmail.setText("School Email");
        jLabelStaffSchoolEmail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jTextFieldStaffSchoolEmail.setToolTipText("");

        javax.swing.GroupLayout jPanelStaffLayout = new javax.swing.GroupLayout(jPanelStaff);
        jPanelStaff.setLayout(jPanelStaffLayout);
        jPanelStaffLayout.setHorizontalGroup(
            jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelStaffLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTextFieldStaff_LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStaffLayout.createSequentialGroup()
                        .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelStaffSchoolEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStaffPhoneNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStaffDepartment, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelHireDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelPassengerLastName1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStaffPosition, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStaff_FirstName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStaff_ID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelStaffLayout.createSequentialGroup()
                                .addComponent(jButtonInsertStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldStaff_ID)
                            .addComponent(dateTimePickerHireDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldFirstName1)
                            .addComponent(jTextFieldStaffPosition)
                            .addComponent(jTextFieldStaffDepartment)
                            .addComponent(jTextFieldStaffPhoneNumber)
                            .addGroup(jPanelStaffLayout.createSequentialGroup()
                                .addComponent(jButtonUpdateStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonDeleteStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldStaffSchoolEmail))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPanePassenger1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(616, 616, 616))
        );
        jPanelStaffLayout.setVerticalGroup(
            jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStaffLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPanePassenger1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelStaffLayout.createSequentialGroup()
                        .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldStaff_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStaff_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelStaff_FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelStaffLayout.createSequentialGroup()
                                .addComponent(jTextFieldFirstName1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldStaff_LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPassengerLastName1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelHireDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTimePickerHireDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldStaffPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStaffPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelStaffDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldStaffDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStaffPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldStaffPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelStaffSchoolEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldStaffSchoolEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(jPanelStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsertStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout jPanelStaffMainLayout = new javax.swing.GroupLayout(jPanelStaffMain);
        jPanelStaffMain.setLayout(jPanelStaffMainLayout);
        jPanelStaffMainLayout.setHorizontalGroup(
            jPanelStaffMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStaffMainLayout.createSequentialGroup()
                .addComponent(jPanelStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelStaffMainLayout.setVerticalGroup(
            jPanelStaffMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStaffMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPaneDorm.addTab("Staff", jPanelStaffMain);

        jTableAssignment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Assignment ID", "Date Assigned", "Student_ID", "Room_ID", "Staff_ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAssignment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAssignmentMouseClicked(evt);
            }
        });
        jScrollPanePassenger2.setViewportView(jTableAssignment);

        jLabelAssignment_ID.setText("Assignment_ID");
        jLabelAssignment_ID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabelDateAssigned.setText("Date Assigned");
        jLabelDateAssigned.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelDateAssigned.setToolTipText("");

        jButtonInsertAssignment.setText("Insert");
        jButtonInsertAssignment.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInsertAssignment.setIconTextGap(0);
        jButtonInsertAssignment.setInheritsPopupMenu(true);
        jButtonInsertAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertAssignmentActionPerformed(evt);
            }
        });

        jButtonUpdateAssignment.setText("Update");
        jButtonUpdateAssignment.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateAssignmentActionPerformed(evt);
            }
        });

        jButtonDeleteAssignment.setText("Delete");
        jButtonDeleteAssignment.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteAssignmentActionPerformed(evt);
            }
        });

        jLabel1.setText("Student_ID");

        jTextFieldStudentIDf.setToolTipText("");
        jTextFieldStudentIDf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStudentIDfActionPerformed(evt);
            }
        });

        jLabel2.setText("Room_ID");

        jTextFieldRoom_IDFo.setToolTipText("");

        jLabel3.setText("Staff_ID");

        jTextFieldStaff_IDFo.setToolTipText("");

        javax.swing.GroupLayout jPanelAssignmentLayout = new javax.swing.GroupLayout(jPanelAssignment);
        jPanelAssignment.setLayout(jPanelAssignmentLayout);
        jPanelAssignmentLayout.setHorizontalGroup(
            jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                        .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelAssignment_ID, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(jLabelDateAssigned, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                                .addGap(0, 4, Short.MAX_VALUE)
                                .addComponent(jTextFieldAssignment_ID1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                                .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateTimePickerDateAssigned, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextFieldStudentIDf)
                                    .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                                        .addComponent(jButtonUpdateAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonDeleteAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextFieldRoom_IDFo))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jTextFieldStaff_IDFo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPanePassenger2, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(616, 616, 616))
                    .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                        .addComponent(jButtonInsertAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelAssignmentLayout.setVerticalGroup(
            jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPanePassenger2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAssignmentLayout.createSequentialGroup()
                        .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldAssignment_ID1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelAssignment_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDateAssigned, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTimePickerDateAssigned, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldStudentIDf, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldRoom_IDFo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldStaff_IDFo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(9, 9, 9)
                .addGroup(jPanelAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsertAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1516, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanelAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanelAssignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 186, Short.MAX_VALUE)))
        );

        jTabbedPaneDorm.addTab("Assignment", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneDorm, javax.swing.GroupLayout.PREFERRED_SIZE, 934, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPaneDorm, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPaneDorm.getAccessibleContext().setAccessibleName("Order");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTableRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRoomMouseClicked
        int i = jTableRoom.getSelectedRow();
        TableModel model = jTableRoom.getModel();
        jTextFieldRoom_ID.setText(model.getValueAt(i, 0).toString());
        jTextFieldRoomNumber.setText(model.getValueAt(i, 1).toString());
        jTextFieldRoomType.setText(model.getValueAt(i, 2).toString());
        jTextFieldRoomPrice.setText(model.getValueAt(i, 3).toString());


        
    }//GEN-LAST:event_jTableRoomMouseClicked

    private void jButtonInsertRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertRoomActionPerformed
        // TODO add your handling code here:
        //System.out.println(dateTimePicker.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker.timePicker.getTimeStringOrEmptyString()+":00.0");
       if (!jTextFieldRoom_ID.getText().isEmpty()) {
            int Room_ID = Integer.parseInt(jTextFieldRoom_ID.getText().trim());
            int RoomNumber = Integer.parseInt(jTextFieldRoomNumber.getText().trim());
            String RoomType = jTextFieldRoomType.getText().trim();
            int RoomPrice = Integer.parseInt(jTextFieldRoomPrice.getText().trim());
           
            
            primaryKeyViolationRoom(Room_ID);
            foreignKeyViolationAssignment(Room_ID);
            addRoom(Room_ID, RoomNumber, RoomType, RoomPrice);
            refreshRoomTable();
            clearRoomTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonInsertRoomActionPerformed

    private void jButtonUpdateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateRoomActionPerformed
        if (!jTextFieldRoom_ID.getText().isEmpty()) {
            int Room_ID = Integer.parseInt(jTextFieldRoom_ID.getText().trim());
            int RoomNumber = Integer.parseInt(jTextFieldRoomNumber.getText().trim());
            String RoomType = jTextFieldRoomType.getText().trim();
            int RoomPrice = Integer.parseInt(jTextFieldRoomPrice.getText().trim());
            Room Room = getRoom(Room_ID);
            if(Room.getRoom_ID() != -1) {
                //foreignKeyViolationStudent(checkinID);
                updateRoom(Room_ID, RoomNumber, RoomType, RoomPrice);
                refreshRoomTable();
            }
            else
            {
                alert("Room does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateRoomActionPerformed

    private void jButtonDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteRoomActionPerformed
       if (!jTextFieldRoom_ID.getText().isEmpty()) {
            int Room_ID = Integer.parseInt(jTextFieldRoom_ID.getText().trim());
            int RoomNumber = Integer.parseInt(jTextFieldRoomNumber.getText().trim());
            String RoomType = jTextFieldRoomType.getText().trim();
            int RoomPrice = Integer.parseInt(jTextFieldRoomPrice.getText().trim());
            Room Room = getRoom(Room_ID);
            if(Room.getRoom_ID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteRoom(Room_ID, RoomNumber, RoomType, RoomPrice);
                    refreshRoomTable();
                    clearRoomTextFields();
                    foreignKeyViolationAssignment(Room_ID);
                }
            }
            else
            {
                alert("Room does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
       
    }//GEN-LAST:event_jButtonDeleteRoomActionPerformed

    private void jTableStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableStaffMouseClicked
        // TODO add your handling code here:
        int i = jTableStaff.getSelectedRow();
        TableModel model = jTableStaff.getModel();
        jTextFieldStaff_ID.setText(model.getValueAt(i, 0).toString());
        jTextFieldFirstName1.setText(model.getValueAt(i, 1).toString());
        jTextFieldStaff_LastName.setText(model.getValueAt(i, 2).toString());
        String HireDate = model.getValueAt(i, 3).toString();
        jTextFieldStaffPosition.setText(model.getValueAt(i, 4).toString());
        jTextFieldStaffDepartment.setText(model.getValueAt(i, 5).toString());
        jTextFieldStaffPhoneNumber.setText(model.getValueAt(i, 6).toString());
        jTextFieldStaffSchoolEmail.setText(model.getValueAt(i, 7).toString());
        
        LocalDate date1 = LocalDate.of(Integer.parseInt(HireDate.substring(0, 4)) , 
            Integer.parseInt(HireDate.substring(5, 7)), Integer.parseInt(HireDate.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(HireDate.substring(11, 13)), Integer.parseInt(HireDate.substring(14, 16)));
        
        dateTimePickerHireDate.datePicker.setDate(date1);
        dateTimePickerHireDate.timePicker.setTime(time1); 
    }//GEN-LAST:event_jTableStaffMouseClicked

    private void jButtonInsertStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertStaffActionPerformed
if (!jTextFieldStaff_ID.getText().isEmpty()) {
            int Staff_ID = Integer.parseInt(jTextFieldStaff_ID.getText().trim());
            String Staff_FirstName = jTextFieldFirstName1.getText().trim();
            String Staff_LastName = jTextFieldStaff_LastName.getText().trim();
            String HireDate =  dateTimePickerHireDate.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerHireDate.timePicker.getTimeStringOrEmptyString()+":00.0";
            String StaffPosition = jTextFieldStaffPosition.getText().trim();
            String StaffDepartment = jTextFieldStaffDepartment.getText().trim();
            String StaffPhoneNumber = jTextFieldStaffPhoneNumber.getText().trim();
            String SchoolEmail = jTextFieldStaffSchoolEmail.getText().trim();
            primaryKeyViolationStaff(Staff_ID);
            addStaff(Staff_ID, Staff_FirstName,Staff_LastName,HireDate,StaffPosition,StaffDepartment,StaffPhoneNumber,SchoolEmail);
            refreshStaffTable();
            clearStaffTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }       
    }//GEN-LAST:event_jButtonInsertStaffActionPerformed

    private void jButtonUpdateStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateStaffActionPerformed
        // TODO add your handling code here:
                if (!jTextFieldStaff_ID.getText().isEmpty()) {
            int Staff_ID = Integer.parseInt(jTextFieldStaff_ID.getText().trim());
            String Staff_FirstName = jTextFieldFirstName1.getText().trim();
            String Staff_LastName = jTextFieldStaff_LastName.getText().trim();
            String HireDate =  dateTimePickerHireDate.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerHireDate.timePicker.getTimeStringOrEmptyString()+":00.0";
            String StaffPosition = jTextFieldStaffPosition.getText().trim();
            String StaffDepartment = jTextFieldStaffDepartment.getText().trim();
            String StaffPhoneNumber = jTextFieldStaffPhoneNumber.getText().trim();
            String SchoolEmail = jTextFieldStaffSchoolEmail.getText().trim();
            Staff Staff = getStaff(Staff_ID);
            if(Staff.getStaff_ID() != -1) {
                updateStaff(Staff_ID, Staff_FirstName,Staff_LastName,HireDate,StaffPosition,StaffDepartment,StaffPhoneNumber, SchoolEmail );
                refreshStaffTable();
            }
            else
            {
                alert("Staff does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }

    }//GEN-LAST:event_jButtonUpdateStaffActionPerformed

    private void jButtonDeleteStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteStaffActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldStaff_ID.getText().isEmpty()) {
           int Staff_ID = Integer.parseInt(jTextFieldStaff_ID.getText().trim());
            String Staff_FirstName = jTextFieldFirstName1.getText().trim();
            String Staff_LastName = jTextFieldStaff_LastName.getText().trim();
            String HireDate = dateTimePickerHireDate.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerHireDate.timePicker.getTimeStringOrEmptyString()+":00.0";
            String StaffPosition = jTextFieldStaffPosition.getText().trim();
            String StaffDepartment = jTextFieldStaffDepartment.getText().trim();
            String StaffPhoneNumber = jTextFieldStaffPhoneNumber.getText().trim();
            String SchoolEmail = jTextFieldStaffSchoolEmail.getText().trim();
            Staff Staff = getStaff(Staff_ID);
            if(Staff.getStaff_ID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteStaff(Staff_ID, Staff_FirstName,Staff_LastName,HireDate,StaffPosition,StaffDepartment,StaffPhoneNumber, SchoolEmail);
                    refreshStaffTable();
                    clearStaffTextFields();
                }
            }
            else
            {
                alert("Staff does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteStaffActionPerformed

    private void jTableAssignmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAssignmentMouseClicked
        // TODO add your handling code here:
        int i = jTableAssignment.getSelectedRow();
        TableModel model = jTableAssignment.getModel();
        jTextFieldAssignment_ID1.setText(model.getValueAt(i, 0).toString());
        String DateAssigned = model.getValueAt(i, 1).toString();
        jTextFieldStudentIDf.setText(model.getValueAt(i, 2).toString());
        jTextFieldRoom_IDFo.setText(model.getValueAt(i, 3).toString());
        jTextFieldStaff_IDFo.setText(model.getValueAt(i, 4).toString());
        
        LocalDate date1 = LocalDate.of(Integer.parseInt(DateAssigned.substring(0, 4)) , 
            Integer.parseInt(DateAssigned.substring(5, 7)), Integer.parseInt(DateAssigned.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(DateAssigned.substring(11, 13)), Integer.parseInt(DateAssigned.substring(14, 16)));
        
        dateTimePickerDateAssigned.datePicker.setDate(date1);
        dateTimePickerDateAssigned.timePicker.setTime(time1); 
        
    }//GEN-LAST:event_jTableAssignmentMouseClicked

    private void jButtonInsertAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertAssignmentActionPerformed
        // TODO add your handling code here:
          if (!jTextFieldAssignment_ID1.getText().isEmpty()) {
            int Assignment_ID = Integer.parseInt(jTextFieldAssignment_ID1.getText().trim());
            String DateAssigned = dateTimePickerDateAssigned.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerDateAssigned.timePicker.getTimeStringOrEmptyString()+":00.0";
            int Student_ID = Integer.parseInt(jTextFieldStudentIDf.getText().trim());
            int Room_ID = Integer.parseInt(jTextFieldRoom_IDFo.getText().trim());
            int Staff_ID = Integer.parseInt(jTextFieldStaff_IDFo.getText().trim());
            
            primaryKeyViolationAssignment(Assignment_ID);
            
            addAssignment(Assignment_ID, DateAssigned, Student_ID, Room_ID, Staff_ID );
            refreshAssignmentTable();
            clearAssignmentTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonInsertAssignmentActionPerformed

    private void jButtonUpdateAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateAssignmentActionPerformed
        // TODO add your handling code here:
         if (!jTextFieldAssignment_ID1.getText().isEmpty()) {
            int Assignment_ID = Integer.parseInt(jTextFieldAssignment_ID1.getText().trim());
            String DateAssigned = dateTimePickerDateAssigned.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerDateAssigned.timePicker.getTimeStringOrEmptyString()+":00.0";
            int Student_ID = Integer.parseInt(jTextFieldStudentIDf.getText().trim());
            int Room_ID = Integer.parseInt(jTextFieldRoom_IDFo.getText().trim());
            int Staff_ID = Integer.parseInt(jTextFieldStaff_IDFo.getText().trim());
            Assignment Assignment = getAssignment(Assignment_ID);
            if(Assignment.getAssignment_ID() != -1) {
                //foreignKeyViolationStudent(checkinID);
                updateAssignment(Assignment_ID, DateAssigned, Student_ID, Room_ID, Staff_ID);
                refreshAssignmentTable();
            }
            else
            {
                alert("Room does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateAssignmentActionPerformed

    private void jButtonDeleteAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteAssignmentActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldAssignment_ID1.getText().isEmpty()) {
             int Assignment_ID = Integer.parseInt(jTextFieldAssignment_ID1.getText().trim());
            String DateAssigned = dateTimePickerDateAssigned.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerDateAssigned.timePicker.getTimeStringOrEmptyString()+":00.0";
            int Student_ID = Integer.parseInt(jTextFieldStudentIDf.getText().trim());
            int Room_ID = Integer.parseInt(jTextFieldRoom_IDFo.getText().trim());
            int Staff_ID = Integer.parseInt(jTextFieldStaff_IDFo.getText().trim());
            Assignment Assignment = getAssignment(Assignment_ID);
            if(Assignment.getAssignment_ID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteAssignment(Assignment_ID, DateAssigned,Student_ID, Room_ID, Staff_ID);
                    refreshAssignmentTable();
                    clearAssignmentTextFields();
                }
            }
            else
            {
                alert("Assignment does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteAssignmentActionPerformed

    private void jTextFieldStudentLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStudentLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStudentLastNameActionPerformed

    //handles delete button action
    private void jButtonDeleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteStudentActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldStudent_ID.getText().isEmpty()) {
            int Student_ID = Integer.parseInt(jTextFieldStudent_ID.getText().trim());
            String Student_FirstName = jTextFieldStudent_FirstName.getText().trim();
            String Student_LastName = jTextFieldStudentLastName.getText().trim();
            String DateOfBirth = dateTimePickerDateOfBirth.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerDateOfBirth.timePicker.getTimeStringOrEmptyString()+":00.0";
            String SchoolEmail = jTextFieldSchoolEmail.getText().trim();
            String PhoneNumber = jTextFieldPhoneNumber.getText().trim();
            Student Student = getStudent(Student_ID);
            if(Student.getStudent_ID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteStudent(Student_ID, Student_FirstName,Student_LastName,DateOfBirth,SchoolEmail,PhoneNumber);
                    refreshStudentTable();
                    clearStudentTextFields();
                }
            }
            else
            {
                alert("Student does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteStudentActionPerformed

    //handles update button action
    private void jButtonUpdateStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateStudentActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldStudent_ID.getText().isEmpty()) {
            int Student_ID = Integer.parseInt(jTextFieldStudent_ID.getText().trim());
            String Student_FirstName = jTextFieldStudent_FirstName.getText().trim();
            String Student_LastName = jTextFieldStudentLastName.getText().trim();
            String DateOfBirth = dateTimePickerDateOfBirth.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerDateOfBirth.timePicker.getTimeStringOrEmptyString()+":00.0";
            String SchoolEmail = jTextFieldSchoolEmail.getText().trim();
            String PhoneNumber = jTextFieldPhoneNumber.getText().trim();
            Student Student = getStudent(Student_ID);
            if(Student.getStudent_ID() != -1) {
                updateStudent(Student_ID, Student_FirstName,Student_LastName,DateOfBirth,SchoolEmail,PhoneNumber);
                refreshStudentTable();
            }
            else
            {
                alert("Student does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateStudentActionPerformed

    //handle insert button action
    private void jButtonInsertStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertStudentActionPerformed
        // TODO add your handling code here:

        if (!jTextFieldStudent_ID.getText().isEmpty()) {
            
            int Student_ID = Integer.parseInt(jTextFieldStudent_ID.getText().trim());
            String Student_FirstName = jTextFieldStudent_FirstName.getText().trim();
            String Student_LastName = jTextFieldStudentLastName.getText().trim();
            String DateOfBirth =  dateTimePickerDateOfBirth.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerDateOfBirth.timePicker.getTimeStringOrEmptyString()+":00.0";
            String SchoolEmail = jTextFieldSchoolEmail.getText().trim();
            String PhoneNumber = jTextFieldPhoneNumber.getText().trim();
            primaryKeyViolationStudent(Student_ID);
            addStudent(Student_ID, Student_FirstName,Student_LastName,DateOfBirth,SchoolEmail,PhoneNumber);
            refreshStudentTable();
            clearStudentTextFields();
        }
        else
        {
            alert("ID_CANNOT BE EMPTYt");
        }
    }//GEN-LAST:event_jButtonInsertStudentActionPerformed

    //set the values of a row to the textfields
    private void jTableStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableStudentMouseClicked
        // TODO add your handling code here:
        int i = jTableStudent.getSelectedRow();
        TableModel model = jTableStudent.getModel();
        jTextFieldStudent_ID.setText(model.getValueAt(i, 0).toString());
        jTextFieldStudent_FirstName.setText(model.getValueAt(i, 1).toString());
        jTextFieldStudentLastName.setText(model.getValueAt(i, 2).toString());
        String DateOfBirth = model.getValueAt(i, 3).toString();
        jTextFieldSchoolEmail.setText(model.getValueAt(i, 4).toString());
        jTextFieldPhoneNumber.setText(model.getValueAt(i, 5).toString());
        
       LocalDate date1 = LocalDate.of(Integer.parseInt(DateOfBirth.substring(0, 4)) , 
            Integer.parseInt(DateOfBirth.substring(5, 7)), Integer.parseInt(DateOfBirth.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(DateOfBirth.substring(11, 13)), Integer.parseInt(DateOfBirth.substring(14, 16)));
        
        dateTimePickerDateOfBirth.datePicker.setDate(date1);
        dateTimePickerDateOfBirth.timePicker.setTime(time1);  
    }//GEN-LAST:event_jTableStudentMouseClicked

    private void jTextFieldStudentIDfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStudentIDfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStudentIDfActionPerformed



    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }
    
    //method to check for room's Student id foreign key violation
    //              fix
    
    //                fix
    public void foreignKeyViolationAssignment(int ID) {
        if(getStudent(ID).getStudent_ID() == -1) {
            alert("Student ID does not exist", "Foreign Key Violation");
        }
        if(getRoom(ID).getRoom_ID() == -1) {
            alert("Room ID does not exist", "Foreign Key Violation");
        }
        if(getStaff(ID).getStaff_ID() == -1) {
            alert("Staff ID does not exist", "Foreign Key Violation");
        }
    }
    
    //method to check for Student primary key violation
    public void primaryKeyViolationStudent(int ID) {
        if(getStudent(ID).getStudent_ID() != -1) {
            alert("Another Student already exists with same Student ID, please try another Student ID", "Primary Key Violation");
        }
    }
    
    //method to check for room primary key violation
    public void primaryKeyViolationRoom(int ID) {
        if(getRoom(ID).getRoom_ID() != -1) {
            alert("Another Room already exists with same Room ID, please try another Room ID", "Primary Key Violation");
        }
    }
     public void primaryKeyViolationStaff(int ID) {
        if(getStaff(ID).getStaff_ID() != -1) {
            alert("Another Staff already exists with same Staff ID, please try another Staff ID", "Primary Key Violation");
        }
    }
      public void primaryKeyViolationAssignment(int ID) {
        if(getAssignment(ID).getAssignment_ID() != -1) {
            alert("Another Assignment already exists with same Assignment ID, please try another Assignment ID", "Primary Key Violation");
        }
    }
    
    
    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    /**
     * student CRUD FUNCTIONS
    */
    private static void addStudent(int Student_ID, String Student_FirstName, String Student_LastName, String DateOfBirth, String  SchoolEmail, String  PhoneNumber) {
        Student Student;
        Student = new Student(Student_ID,  Student_FirstName,Student_LastName, DateOfBirth, SchoolEmail, PhoneNumber);
     StudentDAO.insert(Student);
    }
    
    private static void updateStudent(int Student_ID, String Student_FirstName, String Student_LastName, String DateOfBirth, String  SchoolEmail, String  PhoneNumber) {
        Student Student;
        Student = new Student(Student_ID,  Student_FirstName,Student_LastName, DateOfBirth, SchoolEmail, PhoneNumber);
     StudentDAO.update(Student);
    }
    
    private static void deleteStudent(int Student_ID, String Student_FirstName, String Student_LastName, String DateOfBirth, String  SchoolEmail, String  PhoneNumber) {
        Student Student;
        Student = new Student( Student_ID,  Student_FirstName,Student_LastName, DateOfBirth, SchoolEmail, PhoneNumber);
        StudentDAO.delete(Student);
    }
    
    static Student getStudent(int ID) {
        Optional<Student> Student = StudentDAO.get(ID);
        return Student.orElseGet(() -> new Student(-1, "Non-exist", "Non-exist", "Non-exist", "Non-exist", "Non-exist"));
    }
    
    
    /**
     * Staff CRUD FUNCTIONS
    */
    private static void addRoom(int Room_ID, int RoomNumber, String RoomType, int RoomPrice){
        Room Room;
        Room = new Room(Room_ID, RoomNumber, RoomType, RoomPrice);
        RoomDAO.insert(Room);
    }
    
    private static void updateRoom(int Room_ID, int RoomNumber,String RoomType, int RoomPrice) {
        Room Room;
        Room = new Room(Room_ID, RoomNumber, RoomType, RoomPrice);
        RoomDAO.update(Room);
    }
    
    private static void deleteRoom(int Room_ID, int RoomNumber,String RoomType, int RoomPrice) {
        Room Room;
        Room = new Room(Room_ID, RoomNumber, RoomType, RoomPrice);
        RoomDAO.delete(Room);
    }
    
    static Room getRoom(int ID) {
        Optional<Room> Room = RoomDAO.get(ID);
        return Room.orElseGet(() -> new Room(-1, -1, " ", -1));
    }
    
    
        /**
     * Staff CRUD FUNCTIONS
    */
    private static void addStaff(int Staff_ID, String Staff_FirstName, String Staff_LastName,String HireDate,String  StaffPosition, String  StaffDepartment, String  StaffPhoneNumber,String  SchoolEmail){
        Staff Staff;
        Staff = new Staff(Staff_ID, Staff_FirstName, Staff_LastName, HireDate, StaffPosition,StaffDepartment, StaffPhoneNumber, SchoolEmail);
        StaffDAO.insert(Staff);
    }
    
    private static void updateStaff(int Staff_ID, String Staff_FirstName, String Staff_LastName,String HireDate,String  StaffPosition, String  StaffDepartment, String  StaffPhoneNumber,String  SchoolEmail) {
        Staff Staff;
        Staff = new Staff( Staff_ID, Staff_FirstName,  Staff_LastName, HireDate,StaffPosition, StaffDepartment,  StaffPhoneNumber, SchoolEmail);
        StaffDAO.update(Staff);
    }
    
    private static void deleteStaff(int Staff_ID, String Staff_FirstName, String Staff_LastName,String HireDate,String  StaffPosition, String  StaffDepartment, String  StaffPhoneNumber,String  SchoolEmail) {
        Staff Staff;
        Staff = new Staff(Staff_ID, Staff_FirstName, Staff_LastName, HireDate, StaffPosition,StaffDepartment, StaffPhoneNumber, SchoolEmail);
        StaffDAO.delete(Staff);
    }
    
    static Staff getStaff(int ID) {
        Optional<Staff> Staff = StaffDAO.get(ID);
        return Staff.orElseGet(() -> new Staff(-1, "Non-exist", "Non-exist","Non-exist","Non-exist","Non-exist","Non-exist","Non-exist"));
    }
    
    
        /**
     * Staff CRUD FUNCTIONS
    */
    private static void addAssignment(int Assignment_ID,String DateAssigned, int Student_ID, int Room_ID, int Staff_ID){
        Assignment Assignment;
        Assignment = new Assignment(Assignment_ID, DateAssigned, Student_ID, Room_ID, Staff_ID);
        AssignmentDAO.insert(Assignment);
    }
    
    private static void updateAssignment(int Assignment_ID,String DateAssigned, int Student_ID, int Room_ID, int Staff_ID) {
        Assignment Assignment;
        Assignment = new Assignment(Assignment_ID, DateAssigned, Student_ID, Room_ID, Staff_ID);
        AssignmentDAO.update(Assignment);
    }
    
    private static void deleteAssignment(int Assignment_ID,String DateAssigned, int Student_ID, int Room_ID, int Staff_ID) {
        Assignment Assignment;
        Assignment = new Assignment(Assignment_ID, DateAssigned, Student_ID, Room_ID, Staff_ID);
      AssignmentDAO.delete(Assignment);
    }
    
    static Assignment getAssignment(int ID) {
        Optional<Assignment> Assignment = AssignmentDAO.get(ID);
        return Assignment.orElseGet(() -> new Assignment(-1, "Non-exist",-1,-1,-1));
    }
    
    //method to clear the Student txt fields
    private void clearStudentTextFields() {
        jTextFieldStudent_ID.setText("");
        jTextFieldStudent_FirstName.setText("");
        jTextFieldStudentLastName.setText("");
        dateTimePickerDateOfBirth.setDateTimePermissive(LocalDateTime.MIN);
        jTextFieldSchoolEmail.setText("");
        jTextFieldPhoneNumber.setText("");
        
    }
    
    //method to clear the room txt fields
    private void clearRoomTextFields() {
        jTextFieldRoom_ID.setText("");
        jTextFieldRoomNumber.setText("");
        jTextFieldRoomType.setText("");
        jTextFieldRoomPrice.setText("");
        
    }
    
     private void clearStaffTextFields() {
        jTextFieldStaff_ID.setText("");
        jTextFieldFirstName1.setText("");
        jTextFieldStaff_LastName.setText("");
        dateTimePickerHireDate.setDateTimePermissive(LocalDateTime.MIN);
        jTextFieldStaffPosition.setText("");
        jTextFieldStaffDepartment.setText("");
        jTextFieldStaffPhoneNumber.setText("");
        jTextFieldStaffSchoolEmail.setText("");
        
    }
     private void clearAssignmentTextFields() {
        jTextFieldAssignment_ID1.setText("");
        dateTimePickerDateAssigned.setDateTimePermissive(LocalDateTime.MIN);
        jTextFieldStudentIDf.setText("");
        jTextFieldRoom_IDFo.setText("");
        jTextFieldStaff_IDFo.setText("");
        
    }

    //fetch Student table
    private void refreshStudentTable() {
        List<Student> Students = StudentDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableStudent.getModel();
        //Clear all items in tblContacts
        for(int Student_ID = model.getRowCount() - 1; Student_ID >= 0; Student_ID-- ) {
            model.removeRow(Student_ID);
        }
        for (Student student : Students) {
                Object[] row = new Object[6];
                row[0] = student.getStudent_ID();
                row[1] = student.getStudent_FirstName();
                row[2] = student.getStudent_LastName();
                row[3] = student.getDateOfBirth();
                row[4] = student.getSchoolEmail();
                row[5] = student.getPhoneNumber();
                model.addRow(row);
        }
    }
    
    //fetch room table
    private void refreshAssignmentTable() {
        List<Assignment> Assignment = AssignmentDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableAssignment.getModel();
        //Clear all items in tblContacts
        for(int ID = model.getRowCount() - 1; ID >= 0; ID-- ) {
            model.removeRow(ID);
        }
        for (Assignment Assignments : Assignment) {
                Object[] row = new Object[5];
                row[0] = Assignments.getAssignment_ID();
                row[1] = Assignments.getDateAssigned();
                row[2] = Assignments.getStudent_ID();
                row[3] = Assignments.getRoom_ID();
                row[4] = Assignments.getStaff_ID();
                
                model.addRow(row);
        }
    }
    private void refreshStaffTable() {
        List<Staff> Staff = StaffDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableStaff.getModel();
        //Clear all items in tblContacts
        for(int ID = model.getRowCount() - 1; ID >= 0; ID-- ) {
            model.removeRow(ID);
        }
        for (Staff staff : Staff) {
                Object[] row = new Object[8];
                row[0] = staff.getStaff_ID();
                row[1] = staff.getStaff_FirstName();
                row[2] = staff.getStaff_LastName();
                row[3] = staff.getHireDate();
                row[4] = staff.getStaffPosition();
                row[5] = staff.getStaffDepartment();
                row[6] = staff.getStaffPhoneNumber();
                row[7] = staff.getSchoolEmail();
                
                model.addRow(row);
        }
    }
    private void refreshRoomTable() {
        List<Room> Room = RoomDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableRoom.getModel();
        //Clear all items in tblContacts
        for(int ID = model.getRowCount() - 1; ID >= 0; ID-- ) {
            model.removeRow(ID);
        }
        for (Room room : Room) {
                Object[] row = new Object[4];
                row[0] = room.getRoom_ID();
                row[1] = room.getRoomNumber();
                row[2] = room.getRoomType();
                row[3] = room.getRoomPrice();
                
                model.addRow(row);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        StudentDAO = new StudentDAO();
        RoomDAO = new RoomDAO();
        StaffDAO = new StaffDAO();
        AssignmentDAO = new AssignmentDAO();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main_test().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerDateAssigned;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerDateOfBirth;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerHireDate;
    private javax.swing.JButton jButtonDeleteStudent;
    private javax.swing.JButton jButtonInsertRoom;
    private javax.swing.JButton jButtonInsertStaff;
    private javax.swing.JButton jButtonInsertStudent;
    private javax.swing.JButton jButtonUpdateAssignment;
    private javax.swing.JButton jButtonUpdateRoom;
    private javax.swing.JButton jButtonUpdateStaff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelAssignment_ID;
    private javax.swing.JLabel jLabelDateAssigned;
    private javax.swing.JLabel jLabelHireDate;
    private javax.swing.JLabel jLabelPassengerRoomNumber;
    private javax.swing.JLabel jLabelPhoneNumber;
    private javax.swing.JLabel jLabelRoomPrice;
    private javax.swing.JLabel jLabelRoom_ID;
    private javax.swing.JLabel jLabelSchoolEmail;
    private javax.swing.JLabel jLabelStaffDepartment;
    private javax.swing.JLabel jLabelStaffPhoneNumber;
    private javax.swing.JLabel jLabelStaffPosition;
    private javax.swing.JLabel jLabelStaff_ID;
    private javax.swing.JLabel jLabelStudentFirstName;
    private javax.swing.JLabel jLabelStudentFirstName1;
    private javax.swing.JLabel jLabelStudent_ID;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelAssignment;
    private javax.swing.JPanel jPanelRoom;
    private javax.swing.JPanel jPanelStaff;
    private javax.swing.JPanel jPanelStaffMain;
    private javax.swing.JPanel jPanelStudent;
    private javax.swing.JScrollPane jScrollPaneCheckinLocation;
    private javax.swing.JScrollPane jScrollPanePassenger;
    private javax.swing.JScrollPane jScrollPanePassenger1;
    private javax.swing.JScrollPane jScrollPanePassenger2;
    private javax.swing.JTable jTableAssignment;
    private javax.swing.JTable jTableRoom;
    private javax.swing.JTable jTableStaff;
    private javax.swing.JTable jTableStudent;
    private javax.swing.JTextField jTextFieldAssignment_ID1;
    private javax.swing.JTextField jTextFieldFirstName1;
    private javax.swing.JTextField jTextFieldPhoneNumber;
    private javax.swing.JTextField jTextFieldRoomNumber;
    private javax.swing.JTextField jTextFieldRoomPrice;
    private javax.swing.JTextField jTextFieldRoomType;
    private javax.swing.JTextField jTextFieldRoom_ID;
    private javax.swing.JTextField jTextFieldRoom_IDFo;
    private javax.swing.JTextField jTextFieldSchoolEmail;
    private javax.swing.JTextField jTextFieldStaffDepartment;
    private javax.swing.JTextField jTextFieldStaffPhoneNumber;
    private javax.swing.JTextField jTextFieldStaffPosition;
    private javax.swing.JTextField jTextFieldStaffSchoolEmail;
    private javax.swing.JTextField jTextFieldStaff_ID;
    private javax.swing.JTextField jTextFieldStaff_IDFo;
    private javax.swing.JTextField jTextFieldStaff_LastName;
    private javax.swing.JTextField jTextFieldStudentIDf;
    private javax.swing.JTextField jTextFieldStudentLastName;
    private javax.swing.JTextField jTextFieldStudent_FirstName;
    private javax.swing.JTextField jTextFieldStudent_ID;
    // End of variables declaration//GEN-END:variables
}
